#!/usr/bin/env ruby

require 'mixlib/shellout'
require 'cinch'
require 'open-uri'
require 'chronic_duration'
require 'benchmark'
require 'logger'

# Wrapper for the build_and_publish rake task
# Assumes you have permission to packages.flapjack.io S3 bucket for writing

distro, distro_release, build_ref = ARGV

build_ref_clean = build_ref.sub(/\//, '.')

start_time = Time.now.utc
tstamp = start_time.strftime('%Y%m%dT%H%M%S')

unless distro && distro_release && build_ref
  puts "Must be called with the following arguments:"
  puts "  build_and_publish DISTRO DISTRO_RELEASE BUILD_REF"
  puts "eg:"
  puts "  build_and_publish ubuntu precise v1.2.0rc2"
  exit 1
end

log_file = "flapjack_#{build_ref_clean}-#{tstamp}-#{distro}-#{distro_release}.log"
log = Logger.new(log_file)

log.info "Running build of #{build_ref} on #{distro} #{distro_release} at #{tstamp}"

rake = nil

build_duration = Benchmark.realtime do
  rake = Mixlib::ShellOut.new("OFFICIAL_FLAPJACK_PACKAGE=true BUILD_REF=#{build_ref} DISTRO=#{distro} " +
    "DISTRO_RELEASE=#{distro_release} bundle exec rake build_and_publish 2>&1", :timeout => 60 * 60 * 3)
    #"DISTRO_RELEASE=#{distro_release} bundle exec rake build_and_publish 2>&1 | " +
    #"tee -a #{log}", :timeout => 60 * 60 * 3)
  rake.run_command
end

if rake.error?
  log.info "Failure running `bundle exec rake build_and_publish`"
  log.info "Command: #{rake.inspect}"
else
  log.info "Success running `bundle exec rake build_and_publish`"
end
log.info "Output: "
log.info rake.stdout

duration_string = ChronicDuration.output(build_duration.round(0), :format => :short)
success_string = !rake.error? ? 'Successful' : 'Failed'

log.info "#{success_string} build of #{build_ref} on #{distro} " +
  "#{distro_release} at #{Time.now.utc.iso8601}, duration: #{duration_string}"


log_dst = "packages.flapjack.io/build_logs/#{log_file}"
puts "#{success_string}. Uploading log to #{log_dst}"
log_upload = Mixlib::ShellOut.new("aws s3 cp #{log_file} s3://#{log_dst}")
log_upload.run_command

begin
  log_url = open("http://is.gd/create.php?format=simple&url=http://#{log_dst}").first
rescue
  log_url = "http://#{log_dst}"
end

message = "#{success_string} build of Flapjack #{build_ref} for #{distro} #{distro_release} package (experimental) in #{duration_string}, log: #{log_url}"

puts 'sending message to #flapjack: ' + message
bot = Cinch::Bot.new do
  configure do |c|
    c.server = "irc.freenode.org"
    c.channels = ["#flapjack"]
    c.nick = 'roberta'
  end

  on :connect do |connection|
    Channel('#flapjack').send(message)
    bot.quit
  end
end

bot.start
